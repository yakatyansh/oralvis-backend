const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const S3Service = require('./s3Service');

class PDFGenerator {
  static async generateReport(submission) {
    const doc = new PDFDocument({ margin: 50 });
    
    // Create PDF buffer
    const buffers = [];
    doc.on('data', buffers.push.bind(buffers));
    
    return new Promise(async (resolve, reject) => {
      doc.on('end', async () => {
        try {
          const pdfBuffer = Buffer.concat(buffers);
          
          // Generate filename
          const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
          const filename = `report-${submission.patientId}-${timestamp}.pdf`;
          
          let reportUrl;
          let reportKey;

          // Save PDF (S3 or local)
          if (process.env.AWS_ACCESS_KEY_ID) {
            reportKey = `reports/${filename}`;
            reportUrl = await S3Service.uploadFile(pdfBuffer, reportKey, 'application/pdf');
          } else {
            const localPath = path.join('uploads', filename);
            fs.writeFileSync(localPath, pdfBuffer);
            reportUrl = `/uploads/${filename}`;
          }

          resolve({ reportUrl, reportKey, filename });
        } catch (error) {
          reject(error);
        }
      });

      try {
        // Add header
        doc.fontSize(20).font('Helvetica-Bold').text('OralVis Healthcare', 50, 50);
        doc.fontSize(16).text('Dental Analysis Report', 50, 80);
        
        // Add horizontal line
        doc.moveTo(50, 110).lineTo(550, 110).stroke();
        
        // Patient Information
        doc.fontSize(14).font('Helvetica-Bold').text('Patient Information', 50, 130);
        doc.fontSize(12).font('Helvetica');
        doc.text(`Name: ${submission.patientName}`, 50, 155);
        doc.text(`Patient ID: ${submission.patientId}`, 50, 175);
        doc.text(`Email: ${submission.email}`, 50, 195);
        doc.text(`Upload Date: ${new Date(submission.createdAt).toLocaleDateString()}`, 50, 215);
        doc.text(`Report Generated: ${new Date().toLocaleDateString()}`, 50, 235);
        
        // Patient Notes
        if (submission.note) {
          doc.fontSize(14).font('Helvetica-Bold').text('Patient Notes', 50, 265);
          doc.fontSize(12).font('Helvetica').text(submission.note, 50, 285, { width: 500 });
        }
        
        // Add images section
        let currentY = submission.note ? 320 : 270;
        
        // Original Image
        doc.fontSize(14).font('Helvetica-Bold').text('Original Image', 50, currentY);
        currentY += 25;
        
        try {
          if (fs.existsSync(submission.originalImageUrl) || submission.originalImageUrl.startsWith('http')) {
            doc.image(submission.originalImageUrl, 50, currentY, { width: 200, height: 150 });
          }
        } catch (imageError) {
          doc.fontSize(12).font('Helvetica').text('Original image could not be embedded', 50, currentY);
        }
        
        // Annotated Image (if available)
        if (submission.annotatedImageUrl) {
          doc.fontSize(14).font('Helvetica-Bold').text('Annotated Image', 300, currentY - 25);
          try {
            if (fs.existsSync(submission.annotatedImageUrl) || submission.annotatedImageUrl.startsWith('http')) {
              doc.image(submission.annotatedImageUrl, 300, currentY, { width: 200, height: 150 });
            }
          } catch (imageError) {
            doc.fontSize(12).font('Helvetica').text('Annotated image could not be embedded', 300, currentY);
          }
        }
        
        currentY += 170;
        
        // Admin Notes
        if (submission.adminNotes) {
          doc.fontSize(14).font('Helvetica-Bold').text('Professional Analysis', 50, currentY);
          doc.fontSize(12).font('Helvetica').text(submission.adminNotes, 50, currentY + 20, { width: 500 });
          currentY += 100;
        }
        
        // Status
        doc.fontSize(14).font('Helvetica-Bold').text('Report Status', 50, currentY);
        doc.fontSize(12).font('Helvetica').text(`Status: ${submission.status.toUpperCase()}`, 50, currentY + 20);
        
        // Footer
        doc.fontSize(10).font('Helvetica').text(
          'This report is generated by OralVis Healthcare System. For any queries, please contact our support team.',
          50, doc.page.height - 100,
          { width: 500, align: 'center' }
        );
        
        // Add links if S3 is used
        if (process.env.AWS_ACCESS_KEY_ID) {
          doc.fontSize(10).text(
            `Original Image: ${submission.originalImageUrl}`,
            50, doc.page.height - 70,
            { width: 500 }
          );
          
          if (submission.annotatedImageUrl) {
            doc.text(
              `Annotated Image: ${submission.annotatedImageUrl}`,
              50, doc.page.height - 55,
              { width: 500 }
            );
          }
        }
        
        doc.end();
      } catch (error) {
        reject(error);
      }
    });
  }
}

module.exports = PDFGenerator;